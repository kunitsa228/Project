#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <locale.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>


void table(int array[8][4], char name[8][8]);
char sort(int array[8][4], int arr[8], char name[8][8], int start, int end);
void minisort(char new_name[8][8], int arr[100], int start, int end);
int best(int array[8][4], char name[8][8], int new_char[8], int j);
int worst(int array[8][4], char name[8][8], int new_char[8], int j);
int readfile(int array[8][4], char name[8][8]);
int writefile(int array[8][4], char name[8][8]);
void new_data(int array[8][4], char name[8][8]);


void main() {
	system("chcp 1251");

	int array[8][4];
	char name[10][10];

	int new_char[10];
	int arr[10];

	int z = 0, end = 0, x, y;
	while (end != 7) {
		puts("\nВыберите пункт из списка:");
		puts("1. Вывод промежуточной таблицы");
		puts("2. Вывод игроков с заданными местами по заданному диапазону мест");
		puts("3. Вывод лучшего/худшего игрока в выбранном этапе турнира");
		puts("4. Считать данные из файла");
		puts("5. Ввести новые данные ");
		puts("6. Записать данные в файл");
		puts("7. Закончить работу с программой");

		scanf("%d", &end);
		switch (end) {
		case 1:
			system("cls");
			table(array, name);
			break;

		case 2:
			system("cls");
			puts("Введите диапазон вывода мест");
			puts("Старт: ");
			scanf("%d", &x);
			puts("Конец: ");
			scanf("%d", &y);
			sort(array, arr, name, x - 1, y);
			break;

		case 3:
			system("cls");
			puts("\nВыберите этап турнира");
			puts("1. 1/4");
			puts("2. 1/2");
			puts("3. Финал");
			scanf("%d", &z);
			switch (z) {
			case 1:
				printf("Лучший игрок %s набрал %d баллов\n", new_char, best(array, name, new_char, 0));
				printf("Худший игрок %s набрал %d баллов\n", new_char, worst(array, name, new_char, 0));
				break;

			case 2:
				printf("Лучший игрок %s набрал %d баллов\n", new_char, best(array, name, new_char, 1));
				printf("Худший игрок %s набрал %d баллов\n", new_char, worst(array, name, new_char, 1));
				break;

			case 3:
				printf("Лучший игрок %s набрал %d баллов\n", new_char, best(array, name, new_char, 2));
				printf("Худший игрок %s набрал %d баллов\n", new_char, worst(array, name, new_char, 2));
				break;
			}

		case 4:
			readfile(array, name);
			puts("Чтение завершено");
			break;

		case 5:
			new_data(array, name);
			break;

		case 6:
			writefile(array, name);
			break;

		case 7:
			break;
		}
	}
}

// турнирная таблица
void table(int array[8][4], char name[10][10]) {
	printf("|------------|-----|\n");
	printf("| %10s | %d   |\n", name[0], array[0][0]);
	printf("|------------|-----|-----|\n");
	printf("| %10s | %d   |     |     |------------|-----|\n", name[1], array[1][0]);
	printf("|------------|-----|     |     | %10s | %d   |\n", name[1], array[1][1]);
	printf("                         |-----|------------|-----|-----|\n");
	printf("|------------|-----|     |     | %10s | %d   |     |\n", name[3], array[3][1]);
	printf("| %10s | %d   |     |     |------------|-----|     |\n", name[2], array[2][0]);
	printf("|------------|-----|-----|                              |\n");
	printf("| %10s | %d   |                                    |      |------------|-----|\n", name[3], array[3][0]);
	printf("|------------|-----|                                    |      | %10s | %d   |\n", name[3], array[3][2]);
	printf("                                                        |------|------------|-----|\n");
	printf("|------------|-----|                                    |      | %10s | %d   |\n", name[6], array[6][2]);
	printf("| %10s | %d   |                                    |      |------------|-----|\n", name[4], array[4][0]);
	printf("|------------|-----|-----|                              |\n");
	printf("| %10s | %d   |     |     |------------|-----|     |\n", name[5], array[5][0]);
	printf("|------------|-----|     |     | %10s | %d   |     |\n", name[4], array[4][1]);
	printf("                         |-----|------------|-----|-----|\n");
	printf("|------------|-----|     |     | %10s | %d   |\n", name[6], array[6][1]);
	printf("| %10s | %d   |     |     |------------|-----|\n", name[6], array[6][0]);
	printf("|------------|-----|-----|\n");
	printf("| %10s | %d   |\n", name[7], array[7][0]);
	printf("|------------|-----|\n");


}

// частичная сортировка для вывода
void minisort(char new_name[10][10], int arr[100], int start, int end) {
	int temp;
	char line[12];
	for (int i = start; i < end; i++) {
		for (int j = start; j < end - 1; j++) {
			if (arr[j] < arr[j + 1]) {
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;

				strcpy(line, new_name[j]);
				strcpy(new_name[j], new_name[j + 1]);
				strcpy(new_name[j + 1], line);
			}
		}
	}

}

// сортировка по местам (функция 2)
char sort(int array[8][4], int arr[10], char name[10][10], int start, int end) {
	int count = 0;
	char new_name[10][10];
	for (int i = 0; i < 8; i++) {
		if (array[i][2] != 0) {
			arr[count] = array[i][2];
			strcpy(new_name[count], name[i]);
			count++;
		}
	}

	for (int i = 0; i < 8; i++) {
		if ((array[i][1] != 0) && (array[i][2] == 0)) {
			arr[count] = array[i][1];
			strcpy(new_name[count], name[i]);
			count++;
		}
	}

	for (int i = 0; i < 8; i++) {
		if ((array[i][0] != 0) && (array[i][1] == 0)) {
			arr[count] = array[i][0];
			strcpy(new_name[count], name[i]);
			count++;
		}
	}
	minisort(new_name, arr, 0, 2);
	minisort(new_name, arr, 2, 4);
	minisort(new_name, arr, 4, 8);

	for (int i = start; i < end; i++)
		printf("Место %d занял игрок %s с %d баллами\n", i + 1, new_name[i], arr[i]);
}

// нахождение лучшего игрока в каком-то этапе
int best(int array[8][4], char name[10][10], int new_char[10], int j) {
	int maxx = 0;
	for (int i = 0; i < 8; i++) {
		if (array[i][j] > maxx) {
			maxx = array[i][j];
			strcpy(new_char, name[i]);
		}
		else continue;
	}
	return maxx;
}

// нахождение худшего игрока в каком-то этапе
int worst(int array[8][4], char name[10][10], int new_char[10], int j) {
	int minx = 10;
	for (int i = 0; i < 8; i++) {
		if ((array[i][j] < minx) && (array[i][j] != 0)) {
			minx = array[i][j];
			strcpy(new_char, name[i]);
		}
		else continue;
	}
	return minx;
}

int readfile(int array[8][4], char name[10][10]) {
	FILE* file = fopen("file.txt", "r");
	if (file == NULL) {
		puts("Ошибка открытия файла");
		return 0;
	}
	for (int i = 0; i < 8; i++) {
		fscanf(file, "%s %d %d %d %d\n", &name[i], &array[i][0], &array[i][1], &array[i][2], &array[i][3]);
	}
	fclose(file);
	return 1;
}

void new_data(int array[8][4], char name[10][10]) {
	for (int i = 0; i < 8; i++) {
		printf("Введите имя игрока (не более 10 символов)");
		scanf("%s", &name[i]);
		printf("Введите баллы игрока %d за 1 этап турнира\n", i + 1);
		scanf("%d", &array[i][0]);
		printf("Введите баллы игрока %d за 2 этап турнира\n", i + 1);
		scanf("%d", &array[i][1]);
		printf("Введите баллы игрока %d за 3 этап турнира\n", i + 1);
		scanf("%d", &array[i][2]);
		printf("Введите баллы игрока %d за 4 этап турнира\n", i + 1);
		scanf("%d", &array[i][3]);
	}
}

int writefile(int array[8][4], char name[10][10]) {
	FILE* file = fopen("file.txt", "w");
	if (file == NULL) {
		puts("Ошибка открытия файла");
		return 0;
	}
	for (int i = 0; i < 8; i++) {
		fprintf(file, "%s %d %d %d %d\n", name[i], array[i][0], array[i][1], array[i][2], array[i][3]);
	}
	fclose(file);
	return 1;
}




