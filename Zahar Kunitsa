#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <locale.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>


void tabulation(char name1[10][10], char name12[10][10], char name14[10][10], int final[2], int arr12[2], int arr14[4], int p1, int p2);
void table(int array[8][4], char name[10][10]);
void sort(int array[8][4], char name[10][10], int final[2], int arr12[2], int arr14[4], char name1[10][10], char name12[10][10], char name14[10][10]);
void minisort(char name[10][10], int arr[8], int size);
int best(int array[8][4], char name[10][10], int new_char[10], int j);
int worst(int array[8][4], char name[10][10], int new_char[10], int j);

void main() {
	system("chcp 1251");
	int end = 0;

	int array[8][4] = {
	{ 2, 0, 0, 0},
	{ 6, 3, 0, 0},
	{ 2, 0, 0, 0},
	{ 3, 5, 2, 0},
	{ 5, 6, 0, 0},
	{ 1, 0, 0, 0},
	{ 7, 8, 5, 1},
	{ 4, 0, 0, 0}
	};
	char name[10][10] = {
	{"A1"}, // 1
	{"B2"}, // 2
	{"Б2"}, // 3
	{"Г1"}, // 4
	{"А2"}, // 5
	{"Г2"}, // 6
	{"В1"}, // 7
	{"Б1"}, // 8
	};
	int arr14[8], arr12[4], final[2];
	int new_char[10];

	char name1[10][10], name12[10][10], name14[10][10];
	int cnt = 0, z = 0, x, y;
	while (end != 4) {
		puts("\nВыберите пункт из списка:");
		puts("1. Вывод промежуточной таблицы");
		puts("2. Вывод игроков с заданными местами по заданному диапазону мест");
		puts("3. Вывод лучшего/медианного/худшего игрока в выбранном этапе турнира");
		scanf("%d", &end);
		switch (end) {
		case 1:
			table(array, name);
			break;

		case 2:
			sort(array, name, final, arr12, arr14, name1, name12, name14);
			puts("Введите диапазон вывода мест");
			puts("Старт: ");
			scanf("%d", &x);
			puts("Конец: ");
			scanf("%d", &y);
			tabulation(name1, name12, name14, final, arr12, arr14, x, y);
			break;

		case 3:
			sort(array, name, final, arr12, arr14, name1, name12, name14);
			puts("\nВыберите этап турнира");
			puts("1. 1/4");
			puts("2. 1/2");
			puts("3. Финал");
			scanf("%d", &z);
			switch (z) {
			case 1:
				x = best(array, name, new_char, 0);
				printf("Лучший игрок %s набрал %d баллов\n", new_char, x);
				y = worst(array, name, new_char, 0);
				printf("Худший игрок %s набрал %d баллов\n", new_char, y);
				break;

			case 2:
				x = best(array, name, new_char, 1);
				printf("Лучший игрок %s набрал %d баллов\n", new_char, x);
				y = worst(array, name, new_char, 1);
				printf("Худший игрок %s набрал %d баллов\n", new_char, y);
				break;

			case 3:

				printf("Лучший игрок %s набрал %d баллов\n", name1[0], final[0]);
				printf("Худший игрок %s набрал %d баллов\n", name1[1], final[1]);
				break;
			}
			break;
		}
	}
}

// турнирная таблица
void table(int array[8][4], char name[10][10]) {
	printf("|------------|-----|\n");
	printf("| %s         | %d   |\n", name[0], array[0][0]);
	printf("|------------|-----|-----|\n");
	printf("| %s         | %d   |     |     |------------|-----|\n", name[1], array[1][0]);
	printf("|------------|-----|     |     | %s         | %d   |\n", name[1], array[1][1]);
	printf("                         |-----|------------|-----|-----|\n");
	printf("|------------|-----|     |     | %s         | %d   |     |\n", name[3], array[3][1]);
	printf("| %s         | %d   |     |     |------------|-----|     |\n", name[2], array[2][0]);
	printf("|------------|-----|-----|                              |\n");
	printf("| %s         | %d   |                                    |      |------------|-----|\n", name[3], array[3][0]);
	printf("|------------|-----|                                    |      | %s         | %d   |\n", name[3], array[3][2]);
	printf("                                                        |------|------------|-----|\n");
	printf("|------------|-----|                                    |      | %s         | %d   |\n", name[6], array[6][2]);
	printf("| %s         | %d   |                                    |      |------------|-----|\n", name[4], array[4][0]);
	printf("|------------|-----|-----|                              |\n");
	printf("| %s         | %d   |     |     |------------|-----|     |\n", name[5], array[5][0]);
	printf("|------------|-----|     |     | %s         | %d   |     |\n", name[4], array[4][1]);
	printf("                         |-----|------------|-----|-----|\n");
	printf("|------------|-----|     |     | %s         | %d   |\n", name[6], array[6][1]);
	printf("| %s         | %d   |     |     |------------|-----|\n", name[6], array[6][0]);
	printf("|------------|-----|-----|\n");
	printf("| %s         | %d   |\n", name[7], array[7][0]);
	printf("|------------|-----|\n");


}

// частичная сортировка для вывода
void minisort(char name[10][10], int arr[8], int size) {
	int temp;
	char line[12];
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size - 1; j++) {
			if (arr[j] < arr[j + 1]) {
				temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;

				strcpy(line, name[j]);
				strcpy(name[j], name[j + 1]);
				strcpy(name[j + 1], line);
			}
		}
	}

}

// сортировка по местам (функция 2)
void sort(int array[8][4], char name[10][10], int final[2], int arr12[2], int arr14[4], char name1[10][10], char name12[10][10], char name14[10][10]) {
	int count12 = 0, count14 = 0;
	for (int i = 0; i < 8; i++) {
		// 1 место
		if (array[i][3] != 0) {
			final[0] = array[i][2];
			strcpy(name1[0], name[i]);
		}
		// 2 место
		else if ((array[i][3] == 0) && (array[i][2] != 0)) {
			final[1] = array[i][2];
			strcpy(name1[1], name[i]);
		}


		// 3-4 место
		else if ((array[i][2] == 0) && (array[i][1] != 0)) {
			arr12[count12] = array[i][1];
			strcpy(name12[count12], name[i]);
			count12++;
			if (count12 == 2) minisort(name12, arr12, 2);
		}

		// 5-8 место
		else if ((array[i][1] == 0) && (array[i][0] != 0)) {
			arr14[count14] = array[i][0];
			strcpy(name14[count14], name[i]);
			count14++;
			if (count14 == 4) minisort(name14, arr14, 4);
		}
	}
	minisort(name1, final, 2);
}

// вывод мест по диапазону
void tabulation(char name1[10][10], char name12[10][10], char name14[10][10], int final[2], int arr12[2], int arr14[4], int p1, int p2) {
	char tname[15][15];
	for (int i = 0; i < 2; i++) {
		strcpy(tname[i], name1[i]);
	}
	for (int i = 0; i < 2; i++) {
		strcpy(tname[i + 2], name12[i]);
	}
	for (int i = 0; i < 4; i++) {
		strcpy(tname[i + 4], name14[i]);
	}
	for (int i = p1 - 1; i < p2; i++) {
		printf("Место %d занял игрок %s\n", i + 1, tname[i]);
	}
}

// нахождение лучшего игрока в каком-то этапе
int best(int array[8][4], char name[10][10], int new_char[10], int j) {
	int maxx = 0;
	for (int i = 0; i < 8; i++) {
		if (array[i][j] > maxx) {
			maxx = array[i][j];
			strcpy(new_char, name[i]);
		}
		else continue;
	}
	return maxx;
}

// нахождение худшего игрока в каком-то этапе
int worst(int array[8][4], char name[10][10], int new_char[10], int j) {
	int minx = 10;
	for (int i = 0; i < 8; i++) {
		if ((array[i][j] < minx) && (array[i][j] != 0)) {
			minx = array[i][j];
			strcpy(new_char, name[i]);
		}
		else continue;
	}
	return minx;
}
